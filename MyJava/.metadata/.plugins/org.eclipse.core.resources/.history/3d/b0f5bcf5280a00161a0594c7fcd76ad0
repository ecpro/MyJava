package LoonyCorn;

import java.io.BufferedReader;
import java.io.InputStreamReader;

public class Stack {

    private static long MAX_SIZE = 10000000;

    private Element top;
    private long size = 0;


    public static void main(String[] args) throws Exception {
        
    	Stack stack = new Stack();
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    	int N = Integer.parseInt(br.readLine());
    	
    	for(int i = 0; i < N; i++) {
    		String [] inputs = br.readLine().split("\\s+");
    		if(inputs[0].equals("1")) {
    			if(stack.isEmpty()) {
    				System.out.println("No Food");
    			}
    			else {
    				System.out.println(stack.pop());
    			}
    		}
    		if(inputs[0].equals("2")) {
    			stack.push(inputs[1]);
    		}
    	}
    }

    public void push(String data) throws StackOverflowException {
        if (size == MAX_SIZE) {
            throw new StackOverflowException();
        }

        Element elem = new Element(data, top);
        top = elem;
        size++;
    }

    public String pop() throws StackUnderflowException {
        if (size == 0) {
            throw new StackUnderflowException();
        }
        String data = top.getData();
        top = top.getNext();

        size--;

        return data;
    }

    public String peek() throws StackUnderflowException {
        if (size == 0) {
            throw new StackUnderflowException();
        }

        return top.getData();
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public boolean isFull() {
        return size == MAX_SIZE;
    }

    public long getSize() {
        return size;
    }

    public static class Element {
        private String data;
        private Element next;

        public String getData() {
            return data;
        }

        public void setData(String data) {
            this.data = data;
        }

        public Element getNext() {
            return next;
        }

        public void setNext(Element next) {
            this.next = next;
        }

        public Element(String data, Element next) {
            this.data = data;
            this.next = next;
        }
    }

    public static class StackOverflowException extends Exception {
    }

    public static class StackUnderflowException extends Exception {
    }
}
